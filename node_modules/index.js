
const express = require('express'); //引入套件
const app = express(); //新增物件 建立HTTP伺服器
// 加入這兩行
const server = require('http').Server(app); // 掛載http:// 在 HTTP伺服器
const io = require('socket.io')(server); //加入socket.io在 server上

let onlineCount = 0;//加入線上人數計數
 
app.get('/', (req, res) => { //新增路由 get方式 一開始打開顯示
    res.sendFile( __dirname + '/views/index.html'); //把伺服器js掛到客戶端
});
 
// 當發生連線事件
io.on('connection', (socket) => { //當有人連上時(事件)

    onlineCount++; //有人連上線時增加人數

    // console.log('Hello!');  // 匿名的回呼函數 (socket) = 指的是當連線到伺服器時的這件事
    io.emit("online", onlineCount); //處理online事件 並 發送現在人數給客戶端

    // 加入這一段 接收來自前端的 greet 事件 然後回送 greet 事件，並附帶內容
    socket.on("greet", () => { //接收greet事件
        socket.emit("greet", onlineCount); // 處理greet事件 提交訊息回前端 訊息為  現在人數
    });
    socket.on("send", (msg) => { //接收send事件  msg(接收客戶端的 人名,訊息)
        if (Object.keys(msg).length < 2) return; //  如果 msg 內容鍵值小於 2 等於是訊息傳送不完全 直接 return ，終止函式執行。
        io.emit("msg", msg);　//  處理msg事件 並 廣播訊息到聊天室給客戶端
        console.log(msg) //印出接收到的訊息在CMD
    });

    // 當發生離線事件
    socket.on('disconnect', () => { //斷線時 觸發的匿名函數
        onlineCount = (onlineCount < 0) ? 0 : onlineCount-=1; // ? true做 : false做
        io.emit("online", onlineCount); //處理online事件 並 發送現在人數給客戶端
        // console.log('Bye~');  //斷線後 顯示在CMD上
    });

});
 
// 注意，這邊的 server 原本是 app
server.listen(3000, () => { //掛載在3000埠號
    console.log("Server Started. http://localhost:3000");
}); // HTTP 伺服器完成！